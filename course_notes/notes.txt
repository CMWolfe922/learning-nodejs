============
>>> WEB API:
============
--> Service that allows you to get and save data to a server or backend
   |
   + --> Examples:
        |
        + --> User Creation
        + --> Show list of users

============================
>>> WEB FRAMEWORKS FOR NODE:
============================
[+] --> Express: " tried and tested"
 |    |
 |   [+] --> Traditional framework and simple to use
 |
[+] --> Sails: "Feature Rich"
 |    |
 |   [+] --> Has many sub frameworks such as an ORM or object Relational mapper which gives
 |         us database access.
 |
[+] --> Koa: "Most Modern"

--------------------------------------------------------------------------------------------
- NOW WE WILL LOOK AT EACH ONE:
--------------------------------------------------------------------------------------------

============
>>> EXPRESS:
============
- Fast, unopinionated, minimalist webframework for node.js

- Supports Web Applications and Web APIs

 [+] What is a Web Application?
  |
 [+] --> There is usually confusion about what exactly a web application is.
  |     Most people think of just the front end part that they can see.
 [+] --> But web applications have both front end and back end functionality.
 [+] --> They are distributed across both their front end and backend
 [+] --> With that being said, Express.js runs within Node.js and node is just something
         for the back end. But it contributes to the app as a whole. which will talk to the backend.

* Also, as mentioned, their is a lot of community support with Express.js to get help
as well as online documentation because Express.js has been around for so long.


==========
SOCKET.IO:
==========
- Socket.io enables real time, bidirectional, event based communication.
Express on the other allows the client to send a request to the server but
does not allow the server to send a request to the client. So it doesn't have
bidirectional communication..

[+] But Socket.io solves this. in other words we can push notifications from
 |   the server to the client when an event happens. as well as other data.
 |   We will see how this works with our demo app.
 |
[+] --> Socket.io has two parts and both components have an API that is nearly identical.
      | and Just like node.js it is event driven.
      |
      + --> Client Side Library: runs on the browser.
      |
      + --> Server Side Library for node.js:


--------------------------------------------------------------------------------------------
- BUILDING A WEB APPLICATION:
--------------------------------------------------------------------------------------------
* When building a web application think of it as a division of two responsibilities:
    - Host Static Content
     |
    [+] --> Static content can be things like HTML files for websites or images, videos, etc..
    - Host Dynamic Content
     |
    [+] --> Dynamic content is served through a web api or sometimes it is used to serve
            dynamic webpages where the content or the view is composed on the server itself

[+] For our app we will serve a simple html file for static files and then we will create
 |  a web API to show how we can serve the dynamic content.
 |
 + --> We will begin by serving some static files with Express.js.
 |
 + --> So the first thing we will need to do is create a project folder. We will use this
       project folder over the next few videos.

[1] --> Create a directory: in my case I called it static_app
      |
      +--> Once we create the directory we have to initialize
           the project using npm init so that we can create
           a package.json file which will store dependencies
[2] --> Create a server file called `server.js`
[3] --> Now we have to npm install express
      |
      +--> once express is installed we `import` express into
           our file using `var express = require('express')`
      +--> Then we create an app variable that we will use to
           run the server. `var app = express()`
[4]--> From here we would use the app.use function to host our
       static files. `app.use(express.static(__dirname))` which
       tells express we are hosting static files in this directory.
[5]--> Creating the "server" function using app.listen
     |
     +--> `var server = app.listen(3000, () => {
           console.log('Server is listening on port', server.address().port)
     })`

* That is the basics of the getting the script to host static files. Now we will create the front end so that we can add more features for the backend to do.
----------------------------------------------------------------
BUILDING THE FRONT END:
----------------------------------------------------------------
[+] First, I will use boot strap files to add nice looking ui to my HTML file.
 |
 +--> Make sure that you get the correct bootstrap examples. This tutorial was
      made with bootsrap 4 and not 5 so I had to find the bootstrap 4 website
    |
    +-->https://getbootstrap.com/docs/4.0/getting-started/introduction/
 |
 +--> Once the style sheet and the jave script src files are loaded into the
      the index.html document. We then have to build a container item.
 +--> Bootstrap lets you use their items by referencing their class objects.
      so for instance class="jumbotron" inside a div creates a big container
      where you can display things in the web app.

-------------------------------------------------------------------
ADDING THE JAVASCRIPT ON THE HTML PAGE
-------------------------------------------------------------------
[+] in order to interact with our html page, we have to add java script
to it. below I will copy and paste those functions and try and explain each
one for future reference.
